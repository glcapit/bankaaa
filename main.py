import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
import aiosqlite
from datetime import datetime
import requests
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
CRYPTOBOT_TOKEN = os.getenv("CRYPTOBOT_TOKEN")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
async def init_db():
    async with aiosqlite.connect("staking.db") as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                balance REAL DEFAULT 0,
                last_update TEXT
            )
        ''')
        await db.commit()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message_handler(commands=['start'])
async def start(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect("staking.db") as db:
        await db.execute("INSERT OR IGNORE INTO users (user_id, last_update) VALUES (?, ?)", 
                         (user_id, datetime.utcnow().isoformat()))
        await db.commit()
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *CryptoStakeBot*!\n\n"
        "üíº –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç:\n"
        "‚Äî –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç –≤ TON / USDT\n"
        "‚Äî –ü–æ–ª—É—á–∞—Ç—å 3% –≥–æ–¥–æ–≤—ã—Ö –Ω–∞ –æ—Å—Ç–∞—Ç–æ–∫\n"
        "‚Äî –°–ª–µ–¥–∏—Ç—å –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º\n\n"
        "üîí –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ @CryptoBot ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ.\n"
        "üì≤ –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /pay —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.",
        parse_mode='Markdown'
    )

# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
@dp.message_handler(commands=['deposit'])
async def deposit(message: Message):
    try:
        amount = float(message.text.split()[1])
        user_id = message.from_user.id
        async with aiosqlite.connect("staking.db") as db:
            await db.execute("UPDATE users SET balance = balance + ?, last_update = ? WHERE user_id = ?", 
                             (amount, datetime.utcnow().isoformat(), user_id))
            await db.commit()
        await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:.2f} –º–æ–Ω–µ—Ç.")
    except:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /deposit 100")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
@dp.message_handler(commands=['balance'])
async def balance(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect("staking.db") as db:
        async with db.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {row[0]:.2f} –º–æ–Ω–µ—Ç")
            else:
                await message.answer("‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start")

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ —á–µ—Ä–µ–∑ CryptoBot
def create_invoice(user_id: int) -> str:
    url = "https://pay.crypt.bot/createInvoice"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {CRYPTOBOT_TOKEN}"
    }
    data = {
        "asset": "TON",
        "amount": "1.5",
        "currency": "TON",
        "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç {user_id}",
        "hidden_message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!",
        "paid_btn_name": "viewItem",
        "paid_btn_url": "https://t.me/YourBot",  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞
        "payload": str(user_id)
    }
    response = requests.post(url, headers=headers, json=data)
    invoice = response.json()
    return invoice["result"]["pay_url"]

# –ö–æ–º–∞–Ω–¥–∞ –æ–ø–ª–∞—Ç—ã
@dp.message_handler(commands=['pay'])
async def pay(message: Message):
    user_id = message.from_user.id
    invoice_url = create_invoice(user_id)
    btn = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot", url=invoice_url)
    )
    await message.answer("üîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=btn)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    asyncio.get_event_loop().run_until_complete(init_db())
    executor.start_polling(dp, skip_updates=True)

def create_invoice(user_id: int) -> str:
    url = "https://pay.crypt.bot/createInvoice"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {CRYPTOBOT_TOKEN}"
    }
    data = {
        "asset": "TON",
        "amount": "1.5",
        "currency": "TON",
        "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç {user_id}",
        "hidden_message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!",
        "paid_btn_name": "viewItem",
        "paid_btn_url": "https://t.me/YourBot",
        "payload": str(user_id)
    }
    response = requests.post(url, headers=headers, json=data)
    invoice = response.json()
    print("üîç –û—Ç–≤–µ—Ç –æ—Ç CryptoBot:", invoice)  # üîç –î–æ–±–∞–≤–∏–º –ª–æ–≥
    return invoice["result"]["pay_url"]
