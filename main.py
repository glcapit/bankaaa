import asyncio
import os
import logging
import aiosqlite
import aiohttp
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import TerminatedByOtherGetUpdates
from dotenv import load_dotenv

load_dotenv()
logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv("BOT_TOKEN")
CRYPTOBOT_TOKEN = os.getenv("CRYPTOBOT_TOKEN")

bot = Bot(token=API_TOKEN, parse_mode="Markdown")
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
async def init_db():
    async with aiosqlite.connect("staking.db") as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                balance REAL DEFAULT 0,
                last_update TEXT
            )
        ''')
        await db.commit()

# /start
@dp.message_handler(commands=["start"])
async def start(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect("staking.db") as db:
        await db.execute("INSERT OR IGNORE INTO users (user_id, last_update) VALUES (?, ?)",
                         (user_id, datetime.utcnow().isoformat()))
        await db.commit()

    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *CryptoStakeBot*!\n\n"
        "üíº –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç:\n"
        "‚Äî –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç –≤ TON / USDT\n"
        "‚Äî –ü–æ–ª—É—á–∞—Ç—å 3% –≥–æ–¥–æ–≤—ã—Ö –Ω–∞ –æ—Å—Ç–∞—Ç–æ–∫\n"
        "‚Äî –°–ª–µ–¥–∏—Ç—å –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º\n\n"
        "üîí –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ @CryptoBot ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ.\n"
        "üì≤ –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /pay —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å."
    )

# /deposit
@dp.message_handler(commands=["deposit"])
async def deposit(message: Message):
    try:
        parts = message.text.split()
        if len(parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

        amount = float(parts[1])
        user_id = message.from_user.id

        async with aiosqlite.connect("staking.db") as db:
            await db.execute("UPDATE users SET balance = balance + ?, last_update = ? WHERE user_id = ?",
                             (amount, datetime.utcnow().isoformat(), user_id))
            await db.commit()

        await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:.2f} –º–æ–Ω–µ—Ç.")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /deposit 100")

# /balance
@dp.message_handler(commands=["balance"])
async def balance(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect("staking.db") as db:
        async with db.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {row[0]:.2f} –º–æ–Ω–µ—Ç")
            else:
                await message.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start")

# /pay
@dp.message_handler(commands=["pay"])
async def pay(message: Message):
    user_id = message.from_user.id

    async with aiosqlite.connect("staking.db") as db:
        async with db.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,)) as cursor:
            if not await cursor.fetchone():
                await message.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start")
                return

    try:
        invoice_url = await create_invoice(user_id)
        btn = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot", url=invoice_url)
        )
        await message.answer("üîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=btn)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞
async def create_invoice(user_id: int) -> str:
    url = "https://pay.crypt.bot/api/v1/invoice/create" 
    headers = {
        "Content-Type": "application/json",
        "Crypto-Pay-API-Token": 374276:AAUwtjaKFaw0lqM8rG1IobOfn74t1bZaQSO
    }
    payload = {
        "asset": "TON",
        "amount": "1.5",
        "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç {user_id}",
        "hidden_message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!",
        "paid_btn_name": "viewItem",
        "paid_btn_url": "https://t.me/Bankaaa_bot",  
        "payload": str(user_id)
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=payload) as resp:
            result = await resp.json()
            if result.get("ok"):
                return result["result"]["pay_url"]
            raise Exception(result.get("error", "Unknown error"))

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.get_event_loop().run_until_complete(init_db())
    try:
        executor.start_polling(dp, skip_updates=True)
    except TerminatedByOtherGetUpdates:
        logging.warning("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≥–¥–µ-—Ç–æ –µ—â—ë.")
